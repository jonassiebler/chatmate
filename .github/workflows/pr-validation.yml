name: PR Validation

on:
  pull_request:
    branches: [ main, dev ]
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  pr-checks:
    runs-on: ubuntu-latest
    name: PR Quality Checks
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Validate PR title
      run: |
        PR_TITLE="${{ github.event.pull_request.title }}"
        echo "üîç Validating PR title: '$PR_TITLE'"
        
        # Check for conventional commit format or descriptive title
        valid_prefixes=(
          "feat:"
          "fix:"
          "docs:"
          "style:"
          "refactor:"
          "test:"
          "chore:"
          "Add"
          "Update"
          "Fix"
          "Remove"
          "Improve"
          "[FEATURE]"
          "[BUG]"
          "[DOCS]"
          "[CHATMATE]"
        )
        
        title_valid=false
        for prefix in "${valid_prefixes[@]}"; do
          if [[ "$PR_TITLE" == "$prefix"* ]]; then
            title_valid=true
            break
          fi
        done
        
        if [ "$title_valid" = false ]; then
          echo "‚ö†Ô∏è PR title should start with a descriptive prefix"
          echo "Examples: 'feat: add new chatmate', 'fix: resolve installation issue', 'Add Code Review chatmate'"
        else
          echo "‚úÖ PR title format is good"
        fi
        
    - name: Check PR description
      run: |
        PR_BODY="${{ github.event.pull_request.body }}"
        echo "üìù Checking PR description..."
        
        if [ -z "$PR_BODY" ] || [ ${#PR_BODY} -lt 20 ]; then
          echo "‚ùå PR description is too short or missing"
          echo "Please provide a meaningful description of your changes"
          exit 1
        fi
        
        # Check for required sections in PR template
        required_sections=(
          "## Description"
          "### Type of Change"
          "### Testing"
        )
        
        missing_sections=()
        for section in "${required_sections[@]}"; do
          if [[ "$PR_BODY" != *"$section"* ]]; then
            missing_sections+=("$section")
          fi
        done
        
        if [ ${#missing_sections[@]} -gt 0 ]; then
          echo "‚ö†Ô∏è Missing recommended sections in PR description:"
          printf '%s\n' "${missing_sections[@]}"
          echo "Consider using the PR template for better structure"
        else
          echo "‚úÖ PR description looks comprehensive"
        fi
        
    - name: Analyze changed files
      run: |
        echo "üìä Analyzing changed files..."
        
        # Get list of changed files
        git diff --name-only origin/${{ github.base_ref }}...HEAD > changed_files.txt
        
        echo "Changed files:"
        cat changed_files.txt
        
        # Categorize changes
        chatmate_changes=0
        doc_changes=0
        script_changes=0
        github_changes=0
        
        while read -r file; do
          if [[ "$file" == mates/*.chatmode.md ]]; then
            ((chatmate_changes++))
          elif [[ "$file" == *.md ]] && [[ "$file" != mates/* ]]; then
            ((doc_changes++))
          elif [[ "$file" == *.sh ]] || [[ "$file" == hire.sh ]]; then
            ((script_changes++))
          elif [[ "$file" == .github/* ]]; then
            ((github_changes++))
          fi
        done < changed_files.txt
        
        echo "üìà Change summary:"
        echo "  - Chatmate files: $chatmate_changes"
        echo "  - Documentation: $doc_changes"
        echo "  - Scripts: $script_changes"
        echo "  - GitHub configs: $github_changes"
        
        # Set outputs for other jobs
        echo "chatmate_changes=$chatmate_changes" >> $GITHUB_ENV
        echo "doc_changes=$doc_changes" >> $GITHUB_ENV
        echo "script_changes=$script_changes" >> $GITHUB_ENV
        
    - name: Validate new chatmates
      run: |
        echo "ü§ñ Validating new/modified chatmates..."
        
        # Get changed chatmate files
        git diff --name-only origin/${{ github.base_ref }}...HEAD | grep "mates/.*\.chatmode\.md$" > chatmate_files.txt || true
        
        if [ ! -s chatmate_files.txt ]; then
          echo "No chatmate files to validate"
          exit 0
        fi
        
        echo "Chatmate files to validate:"
        cat chatmate_files.txt
        
        error_count=0
        
        while read -r file; do
          echo "üîç Validating: $file"
          
          if [ ! -f "$file" ]; then
            echo "‚ùå File not found: $file"
            ((error_count++))
            continue
          fi
          
          # Check naming convention
          filename=$(basename "$file")
          if [[ ! "$filename" =~ \.chatmode\.md$ ]]; then
            echo "‚ùå Invalid filename: $filename (must end with .chatmode.md)"
            ((error_count++))
          fi
          
          # Check file size
          file_size=$(wc -c < "$file")
          if [ $file_size -eq 0 ]; then
            echo "‚ùå Empty file: $file"
            ((error_count++))
          elif [ $file_size -gt 100000 ]; then
            echo "‚ö†Ô∏è Large file: $file ($file_size bytes)"
          fi
          
          # Check for basic structure
          if ! grep -q "^#" "$file"; then
            echo "‚ö†Ô∏è No headers found in: $file"
          fi
          
          # Check for metadata (if following new convention)
          if grep -q "^---" "$file"; then
            echo "‚úÖ Metadata found in: $file"
          else
            echo "‚ÑπÔ∏è Consider adding metadata to: $file"
          fi
          
          echo "‚úÖ $file validation completed"
          
        done < chatmate_files.txt
        
        if [ $error_count -gt 0 ]; then
          echo "‚ùå Found $error_count errors in chatmate validation"
          exit 1
        fi
        
        echo "üéâ All chatmate files validated successfully!"
        
    - name: Check for breaking changes
      run: |
        echo "üîç Checking for potential breaking changes..."
        
        # Check if critical files were modified
        critical_files=(
          "hire.sh"
          "README.md"
        )
        
        breaking_changes=false
        
        for file in "${critical_files[@]}"; do
          if git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -q "^$file$"; then
            echo "‚ö†Ô∏è Critical file modified: $file"
            
            # Check the nature of changes
            if [ "$file" = "hire.sh" ]; then
              echo "üìã Please ensure installation script changes are backward compatible"
              breaking_changes=true
            fi
          fi
        done
        
        # Check if any existing chatmates were removed
        deleted_files=$(git diff --name-only --diff-filter=D origin/${{ github.base_ref }}...HEAD | grep "mates/.*\.chatmode\.md$" || true)
        
        if [ -n "$deleted_files" ]; then
          echo "üóëÔ∏è Deleted chatmate files:"
          echo "$deleted_files"
          echo "‚ö†Ô∏è This is a breaking change for users who rely on these chatmates"
          breaking_changes=true
        fi
        
        if [ "$breaking_changes" = true ]; then
          echo "üí• This PR contains potential breaking changes"
          echo "Please ensure these changes are documented and justified"
        else
          echo "‚úÖ No breaking changes detected"
        fi
        
    - name: Suggest improvements
      run: |
        echo "üí° Improvement suggestions:"
        
        # Re-check file types for suggestions
        doc_changes=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -c "\.md$" | grep -v "^mates/" || echo "0")
        chatmate_changes=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -c "mates/.*\.chatmode\.md$" || echo "0")
        script_changes=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -c "\\.sh$" || echo "0")
        
        # Check if CONTRIBUTING.md was read
        if [ $doc_changes -eq 0 ] && [ $chatmate_changes -gt 0 ]; then
          echo "üìö Consider reviewing CONTRIBUTING.md for chatmate best practices"
        fi
        
        # Suggest adding tests for script changes
        if [ $script_changes -gt 0 ]; then
          echo "üß™ Consider adding tests for script modifications"
        fi
        
        # Check commit count
        commit_count=$(git rev-list --count origin/${{ github.base_ref }}...HEAD)
        if [ $commit_count -gt 10 ]; then
          echo "üì¶ Consider squashing commits (current: $commit_count commits)"
        fi
        
        echo "‚ú® Thanks for contributing to chatmate!"

  size-check:
    runs-on: ubuntu-latest
    name: Check PR Size
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Check PR size
      run: |
        echo "üìè Checking PR size..."
        
        # Count changed lines
        additions=$(git diff --shortstat origin/${{ github.base_ref }}...HEAD | grep -oE '[0-9]+ insertions?' | grep -oE '[0-9]+' || echo "0")
        deletions=$(git diff --shortstat origin/${{ github.base_ref }}...HEAD | grep -oE '[0-9]+ deletions?' | grep -oE '[0-9]+' || echo "0")
        
        total_changes=$((additions + deletions))
        
        echo "üìä PR Statistics:"
        echo "  - Lines added: $additions"
        echo "  - Lines deleted: $deletions"
        echo "  - Total changes: $total_changes"
        
        # Provide feedback based on size
        if [ $total_changes -lt 50 ]; then
          echo "üü¢ Small PR - easy to review!"
        elif [ $total_changes -lt 200 ]; then
          echo "üü° Medium PR - manageable size"
        elif [ $total_changes -lt 500 ]; then
          echo "üü† Large PR - consider breaking into smaller changes"
        else
          echo "üî¥ Very large PR - strongly consider splitting this up"
          echo "üí° Large PRs are harder to review and more likely to introduce bugs"
        fi
