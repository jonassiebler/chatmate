name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, dev ]
  workflow_dispatch:

env:
  GO_VERSION: '1.23.x'
  BINARY_NAME: chatmate

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Check code formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted. Please run 'gofmt -s -w .'"
          gofmt -s -l .
          exit 1
        fi

    - name: Run static analysis
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

    - name: Run tests
      run: go test -v ./...

    - name: Run tests with race detection
      run: go test -race -v ./...

    - name: Test coverage
      run: |
        go test -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coverage.html

  test-matrix:
    name: Test Matrix
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.22.x', '1.23.x']
    runs-on: ${{ matrix.os }}
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: go test ./...

    - name: Build binary
      run: |
        CGO_ENABLED=0 go build \
          -ldflags="-s -w" \
          -trimpath \
          -o ${{ env.BINARY_NAME }}${{ matrix.os == 'windows-latest' && '.exe' || '' }} .

    - name: Test binary execution (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        ./${{ env.BINARY_NAME }} --version
        ./${{ env.BINARY_NAME }} list --available

    - name: Test binary execution (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        .\${{ env.BINARY_NAME }}.exe --version
        .\${{ env.BINARY_NAME }}.exe list --available

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Get version info
      id: version
      run: |
        if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=$(git describe --always --tags --dirty)
        fi
        COMMIT=$(git rev-parse --short HEAD)
        DATE=$(date -u '+%Y-%m-%d_%H:%M:%S')
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        echo "COMMIT=${COMMIT}" >> $GITHUB_OUTPUT
        echo "DATE=${DATE}" >> $GITHUB_OUTPUT

    - name: Build cross-platform binaries
      run: |
        mkdir -p dist
        
        # Build for different platforms
        platforms=(
          "linux/amd64"
          "linux/arm64"
          "darwin/amd64" 
          "darwin/arm64"
          "windows/amd64"
        )
        
        for platform in "${platforms[@]}"; do
          GOOS=${platform%/*}
          GOARCH=${platform#*/}
          output_name="${{ env.BINARY_NAME }}-${GOOS}-${GOARCH}"
          
          if [ "$GOOS" = "windows" ]; then
            output_name="${output_name}.exe"
          fi
          
          echo "Building for $GOOS/$GOARCH..."
          CGO_ENABLED=0 GOOS=$GOOS GOARCH=$GOARCH go build \
            -ldflags="-s -w -X 'github.com/jonassiebler/chatmate/cmd.version=${{ steps.version.outputs.VERSION }}' -X 'github.com/jonassiebler/chatmate/cmd.commit=${{ steps.version.outputs.COMMIT }}' -X 'github.com/jonassiebler/chatmate/cmd.date=${{ steps.version.outputs.DATE }}'" \
            -trimpath \
            -a \
            -o "dist/${output_name}" .
        done

    - name: Generate checksums
      run: |
        cd dist
        sha256sum * > checksums.txt

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: binaries
        path: dist/

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, test-matrix, build]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: binaries
        path: dist/

    - name: Generate release notes
      id: release_notes
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        
        # Generate changelog for this version
        if git tag -l "${VERSION%.*}.$((${VERSION##*.} - 1))" | grep -q .; then
          PREV_TAG="${VERSION%.*}.$((${VERSION##*.} - 1))"
        else
          PREV_TAG=$(git tag --sort=version:refname | tail -n 2 | head -n 1)
        fi
        
        echo "## What's Changed" > release_notes.md
        if [ -n "$PREV_TAG" ]; then
          git log --pretty=format:"- %s (%h)" ${PREV_TAG}..HEAD >> release_notes.md
        else
          git log --pretty=format:"- %s (%h)" >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "## Installation" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Homebrew (macOS/Linux)" >> release_notes.md
        echo "\`\`\`bash" >> release_notes.md
        echo "brew install jonassiebler/tap/chatmate" >> release_notes.md
        echo "\`\`\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Manual Download" >> release_notes.md
        echo "Download the appropriate binary for your platform from the assets below." >> release_notes.md

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.release_notes.outputs.VERSION }}
        name: ChatMate ${{ steps.release_notes.outputs.VERSION }}
        body_path: release_notes.md
        files: |
          dist/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [test]
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run Gosec Security Scanner
      run: |
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
        gosec ./...

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
