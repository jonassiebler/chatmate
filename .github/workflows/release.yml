name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.0)'
        required: true
        type: string

jobs:
  create-release:
    runs-on: ubuntu-latest
    name: Create Release
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${{ github.ref_name }}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
        
    - name: Validate version format
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "‚ùå Invalid version format: $VERSION"
          echo "Expected format: v1.2.3"
          exit 1
        fi
        echo "‚úÖ Version format is valid: $VERSION"
        
    - name: Generate changelog
      id: changelog
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        echo "üìù Generating changelog for $VERSION..."
        
        # Get the previous tag
        PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -v "$VERSION" | head -n 1)
        
        if [ -z "$PREVIOUS_TAG" ]; then
          echo "No previous tag found, using initial commit"
          PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
        fi
        
        echo "üìä Changes since $PREVIOUS_TAG:"
        
        # Generate changelog
        CHANGELOG="## What's Changed\n\n"
        
        # Get commits since last tag
        COMMITS=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD)
        
        if [ -n "$COMMITS" ]; then
          CHANGELOG+="$COMMITS\n\n"
        else
          CHANGELOG+="- Initial release\n\n"
        fi
        
        # Count chatmates
        CHATMATE_COUNT=$(find mates -name "*.chatmode.md" | wc -l)
        CHANGELOG+="## Chatmates Included\n\n"
        CHANGELOG+="This release includes **$CHATMATE_COUNT** chatmates:\n\n"
        
        # List all chatmates
        for file in mates/*.chatmode.md; do
          if [ -f "$file" ]; then
            name=$(basename "$file" .chatmode.md)
            CHANGELOG+="- $name\n"
          fi
        done
        
        CHANGELOG+="\n## Installation\n\n"
        CHANGELOG+="1. Clone the repository:\n"
        CHANGELOG+="   \`\`\`bash\n"
        CHANGELOG+="   git clone https://github.com/jonassiebler/chatmate.git\n"
        CHANGELOG+="   cd chatmate\n"
        CHANGELOG+="   \`\`\`\n\n"
        CHANGELOG+="2. Install chatmates:\n"
        CHANGELOG+="   \`\`\`bash\n"
        CHANGELOG+="   ./hire.sh\n"
        CHANGELOG+="   \`\`\`\n\n"
        CHANGELOG+="3. Restart VS Code to use your new chatmates\n\n"
        CHANGELOG+="For more information, see the [README](https://github.com/jonassiebler/chatmate/blob/main/README.md)."
        
        # Save changelog to file
        echo -e "$CHANGELOG" > CHANGELOG.txt
        
        # Output for GitHub
        {
          echo 'changelog<<EOF'
          echo -e "$CHANGELOG"
          echo EOF
        } >> $GITHUB_OUTPUT
        
    - name: Create release archive
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        echo "üì¶ Creating release archive..."
        
        # Create a clean directory for the release
        mkdir -p release
        
        # Copy essential files
        cp -r mates release/
        cp hire.sh release/
        cp README.md release/
        cp CONTRIBUTING.md release/
        cp LICENSE release/ 2>/dev/null || echo "LICENSE file not found, skipping"
        
        # Create archive
        cd release
        tar -czf "../chatmate-$VERSION.tar.gz" .
        zip -r "../chatmate-$VERSION.zip" .
        cd ..
        
        # Verify archives
        echo "üìã Archive contents:"
        tar -tzf "chatmate-$VERSION.tar.gz" | head -20
        
        echo "‚úÖ Release archive created"
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: "chatmate ${{ steps.version.outputs.version }}"
        body: ${{ steps.changelog.outputs.changelog }}
        files: |
          chatmate-${{ steps.version.outputs.version }}.tar.gz
          chatmate-${{ steps.version.outputs.version }}.zip
        draft: false
        prerelease: false
        
    - name: Update installation instructions
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        echo "üìù Release $VERSION created successfully!"
        echo ""
        echo "üéâ Users can now install chatmate using:"
        echo "   git clone https://github.com/jonassiebler/chatmate.git"
        echo "   cd chatmate"
        echo "   git checkout $VERSION"
        echo "   ./hire.sh"
        echo ""
        echo "Or download the release archives directly from:"
        echo "https://github.com/jonassiebler/chatmate/releases/tag/$VERSION"
