name: Security

on:
  push:
    branches: [ main ]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:

env:
  GO_VERSION: '1.23.x'

jobs:
  govulncheck:
    name: Go Vulnerability Check
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Install govulncheck
      run: go install golang.org/x/vuln/cmd/govulncheck@latest
      
    - name: Run govulncheck
      run: ~/go/bin/govulncheck ./...

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'go' ]
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      
    - name: Dependency Review
      uses: actions/dependency-review-action@v3

  security-hardening:
    name: Security Hardening Check
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Build binary
      run: go build -o chatmate .
      
    - name: Verify binary security
      run: |
        # Test that the binary runs without crashes
        ./chatmate --version
        ./chatmate --help > /dev/null
        
        echo "✅ Binary security check passed"

  semgrep:
    name: Static Analysis (Semgrep)
    runs-on: ubuntu-latest
    container:
      image: returntocorp/semgrep:latest
    if: github.actor != 'dependabot[bot]'
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      
    - name: Run Semgrep
      run: |
        semgrep ci \
          --sarif \
          --output=semgrep.sarif \
          --config=auto \
          || true
          
    - name: Upload Semgrep results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: semgrep.sarif

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [govulncheck, codeql, security-hardening]
    if: always()
    steps:
    - name: Security scan summary
      run: |
        echo "## Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Scanner | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Govulncheck | ${{ needs.govulncheck.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| CodeQL | ${{ needs.codeql.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Hardening | ${{ needs.security-hardening.result }} |" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.govulncheck.result }}" == "failure" || 
              "${{ needs.codeql.result }}" == "failure" || 
              "${{ needs.security-hardening.result }}" == "failure" ]]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "⚠️ One or more security scans failed. Please review the results." >> $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ All security scans passed!" >> $GITHUB_STEP_SUMMARY
        fi
