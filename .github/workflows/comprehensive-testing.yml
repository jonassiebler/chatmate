name: Comprehensive Testing

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  test-framework:
    runs-on: ${{ matrix.os }}
    name: Test Framework - ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install Node.js dependencies
      run: |
        if [ -f "package.json" ]; then
          npm install
        fi
        
    - name: Install Bats testing framework
      run: |
        # Install Bats core
        git clone https://github.com/bats-core/bats-core.git tests/bats-core
        git clone https://github.com/bats-core/bats-support.git tests/bats-support
        git clone https://github.com/bats-core/bats-assert.git tests/bats-assert
        
        # Add bats to PATH
        echo "$GITHUB_WORKSPACE/tests/bats-core/bin" >> $GITHUB_PATH
        
    - name: Run comprehensive test suite
      run: |
        echo "🧪 Running ChatMate comprehensive test suite..."
        ./run-tests.sh
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}
        path: test-results.log
        
    - name: Test installation script
      run: |
        echo "🔧 Testing installation script..."
        chmod +x hire.sh
        
        # Test script syntax
        bash -n hire.sh
        
        # Test with mock environment
        echo "Testing installation process..."
        mkdir -p /tmp/test-prompts
        export HOME=/tmp
        export OSTYPE="linux-gnu"
        
        # Mock the installation process
        MOCK_PROMPTS_DIR="/tmp/test-prompts"
        mkdir -p "$MOCK_PROMPTS_DIR"
        cp -v mates/*.md "$MOCK_PROMPTS_DIR"/
        
        echo "✅ Installation test completed"
        
    - name: Validate chatmate files
      run: |
        echo "📋 Validating chatmate files..."
        
        # Check all chatmate files exist and are valid
        chatmate_count=$(find mates -name "*.chatmode.md" | wc -l)
        echo "Found $chatmate_count chatmate files"
        
        if [ $chatmate_count -eq 0 ]; then
          echo "❌ No chatmate files found"
          exit 1
        fi
        
        # Validate each chatmate file
        for file in mates/*.chatmode.md; do
          echo "Validating: $(basename "$file")"
          
          # Check YAML frontmatter
          if ! head -n 1 "$file" | grep -q "^---"; then
            echo "❌ Missing YAML frontmatter in $(basename "$file")"
            exit 1
          fi
          
          # Check for required fields
          if ! grep -q "description:" "$file"; then
            echo "❌ Missing description in $(basename "$file")"
            exit 1
          fi
          
          if ! grep -q "model:" "$file"; then
            echo "❌ Missing model in $(basename "$file")"
            exit 1
          fi
          
          if ! grep -q "tools:" "$file"; then
            echo "❌ Missing tools in $(basename "$file")"
            exit 1
          fi
          
          echo "✅ $(basename "$file") is valid"
        done
        
        echo "🎉 All chatmate files validated successfully!"

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security checks
      run: |
        echo "🔒 Running security checks..."
        
        # Check for potential sensitive information
        echo "🔍 Checking for sensitive data patterns..."
        
        sensitive_patterns=("password" "secret" "token" "api[_-]?key" "private[_-]?key")
        error_count=0
        
        for pattern in "${sensitive_patterns[@]}"; do
          if grep -ri "$pattern" mates/ --exclude-dir=.git; then
            echo "⚠️ Found potential sensitive data: $pattern"
            ((error_count++))
          fi
        done
        
        if [ $error_count -gt 0 ]; then
          echo "❌ Security scan found $error_count issues"
          exit 1
        else
          echo "✅ Security scan passed"
        fi

  markdown-quality:
    runs-on: ubuntu-latest
    name: Markdown Quality Check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install markdownlint
      run: npm install -g markdownlint-cli
      
    - name: Create markdownlint config
      run: |
        cat > .markdownlint.json << 'EOF'
        {
          "MD013": false,
          "MD041": false,
          "MD033": false,
          "MD034": false,
          "MD032": false
        }
        EOF
        
    - name: Lint markdown files
      run: |
        echo "📝 Linting markdown files..."
        markdownlint "**/*.md" --config .markdownlint.json
        echo "✅ Markdown linting completed"

  shell-quality:
    runs-on: ubuntu-latest
    name: Shell Script Quality Check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install ShellCheck
      run: |
        sudo apt-get update
        sudo apt-get install -y shellcheck
        
    - name: Check shell scripts
      run: |
        echo "🐚 Checking shell script quality..."
        
        # Check hire.sh
        shellcheck hire.sh
        
        # Check test runner
        shellcheck run-tests.sh
        
        # Check any other shell scripts
        find . -name "*.sh" -not -path "./tests/bats-*" -exec shellcheck {} \;
        
        echo "✅ Shell script quality check completed"

  cross-platform-test:
    runs-on: ${{ matrix.os }}
    name: Cross-Platform Compatibility - ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Test cross-platform compatibility
      shell: bash
      run: |
        echo "🌐 Testing cross-platform compatibility on ${{ runner.os }}..."
        
        # Check file structure
        if [ ! -d "mates" ]; then
          echo "❌ mates directory not found"
          exit 1
        fi
        
        # Check hire.sh exists
        if [ ! -f "hire.sh" ]; then
          echo "❌ hire.sh not found"
          exit 1
        fi
        
        # Test script syntax
        bash -n hire.sh
        
        # Count chatmate files
        chatmate_count=$(find mates -name "*.chatmode.md" | wc -l)
        echo "Found $chatmate_count chatmate files"
        
        if [ $chatmate_count -eq 0 ]; then
          echo "❌ No chatmate files found"
          exit 1
        fi
        
        echo "✅ Cross-platform compatibility test passed on ${{ runner.os }}"

  test-coverage:
    runs-on: ubuntu-latest
    name: Test Coverage Analysis
    needs: [test-framework]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download test results
      uses: actions/download-artifact@v4
      with:
        name: test-results-ubuntu-latest
        
    - name: Analyze test coverage
      run: |
        echo "📊 Analyzing test coverage..."
        
        if [ -f "test-results.log" ]; then
          echo "Test results found:"
          cat test-results.log
          
          # Extract test statistics
          if grep -q "Success Rate:" test-results.log; then
            success_rate=$(grep "Success Rate:" test-results.log | cut -d' ' -f3)
            echo "Test Success Rate: $success_rate"
            
            # Require at least 80% success rate
            rate_num=$(echo "$success_rate" | sed 's/%//')
            if [ "$rate_num" -lt 80 ]; then
              echo "❌ Test success rate below 80%"
              exit 1
            fi
          fi
          
          echo "✅ Test coverage analysis completed"
        else
          echo "⚠️ No test results found"
        fi
